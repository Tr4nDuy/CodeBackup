# Logstash Pipeline Configuration for NIDS
# File: nids-pipeline.conf

input {
  # Monitor NIDS log files
  file {
    path => "C:/Users/ADMIN/Desktop/CodeBackup/v2_pcap2csv_automation/logs/*.log"
    start_position => "end"
    type => "nids-detection"
    codec => "json"
    tags => ["nids", "security", "network"]
  }
  
  # Optional: Listen for direct TCP input from NIDS
  tcp {
    port => 5514
    type => "nids-tcp"
    codec => "json_lines"
    tags => ["nids", "realtime"]
  }
}

filter {
  # Parse timestamp
  if [timestamp] {
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSSSSS" ]
      target => "@timestamp"
    }
  }
  
  # Enrich with GeoIP if source_ip exists
  if [source_ip] {
    geoip {
      source => "source_ip"
      target => "src_geo"
    }
  }
  
  if [destination_ip] {
    geoip {
      source => "destination_ip"
      target => "dst_geo"
    }
  }
  
  # Add severity level based on prediction
  if [prediction] {
    if [prediction] == "0_normal" {
      mutate {
        add_field => { "severity" => "info" }
        add_field => { "risk_level" => 1 }
      }
    } else {
      mutate {
        add_field => { "severity" => "high" }
        add_field => { "risk_level" => 8 }
      }
      
      # Add alert classification
      if [prediction] == "TCP" {
        mutate {
          add_field => { "attack_type" => "TCP Port Scan" }
          add_field => { "category" => "reconnaissance" }
        }
      } else if [prediction] == "UDP" {
        mutate {
          add_field => { "attack_type" => "UDP Port Scan" }
          add_field => { "category" => "reconnaissance" }
        }
      } else if [prediction] == "ICMP" {
        mutate {
          add_field => { "attack_type" => "ICMP Sweep" }
          add_field => { "category" => "reconnaissance" }
        }
      } else if [prediction] == "ARP" {
        mutate {
          add_field => { "attack_type" => "ARP Scan" }
          add_field => { "category" => "reconnaissance" }
        }
      }
    }
  }
  
  # Add network zone classification
  if [source_ip] {
    cidr {
      address => [ "%{source_ip}" ]
      network => [ "192.168.1.0/24" ]
      add_tag => [ "lan_source" ]
    }
    cidr {
      address => [ "%{source_ip}" ]
      network => [ "10.0.0.0/24" ]
      add_tag => [ "wan_source" ]
    }
    cidr {
      address => [ "%{source_ip}" ]
      network => [ "172.16.0.0/24" ]
      add_tag => [ "dmz_source" ]
    }
    cidr {
      address => [ "%{source_ip}" ]
      network => [ "192.168.100.0/24" ]
      add_tag => [ "server_source" ]
    }
  }
  
  # Calculate session duration if available
  if [flow_duration] {
    ruby {
      code => "
        duration = event.get('flow_duration')
        if duration
          if duration > 300
            event.set('session_type', 'long')
          elsif duration > 60
            event.set('session_type', 'medium')
          else
            event.set('session_type', 'short')
          end
        end
      "
    }
  }
  
  # Remove unnecessary fields to reduce storage
  mutate {
    remove_field => [ "host", "path", "@version" ]
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "nids-logs-%{+YYYY.MM.dd}"
    template_name => "nids-template"
    template_pattern => "nids-logs-*"
    template => "{
      \"index_patterns\": [\"nids-logs-*\"],
      \"settings\": {
        \"number_of_shards\": 1,
        \"number_of_replicas\": 0,
        \"refresh_interval\": \"5s\"
      },
      \"mappings\": {
        \"properties\": {
          \"@timestamp\": { \"type\": \"date\" },
          \"timestamp\": { \"type\": \"date\" },
          \"source_ip\": { \"type\": \"ip\" },
          \"destination_ip\": { \"type\": \"ip\" },
          \"source_port\": { \"type\": \"integer\" },
          \"destination_port\": { \"type\": \"integer\" },
          \"protocol\": { \"type\": \"keyword\" },
          \"prediction\": { \"type\": \"keyword\" },
          \"confidence\": { \"type\": \"float\" },
          \"severity\": { \"type\": \"keyword\" },
          \"risk_level\": { \"type\": \"integer\" },
          \"attack_type\": { \"type\": \"keyword\" },
          \"category\": { \"type\": \"keyword\" },
          \"packet_count\": { \"type\": \"integer\" },
          \"byte_count\": { \"type\": \"long\" },
          \"flow_duration\": { \"type\": \"float\" },
          \"session_type\": { \"type\": \"keyword\" }
        }
      }
    }"
  }
  
  # Debug output (comment out in production)
  stdout {
    codec => rubydebug
  }
    # Optional: Send alerts to file for backup
  if [severity] == "high" {
    file {
      path => "C:/ELK/alerts/nids-alerts-%{+YYYY-MM-dd}.log"
      codec => "json_lines"
    }
  }
}
