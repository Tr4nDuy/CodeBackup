# Logstash Pipeline Configuration for NIDS Multi-Zone Monitoring
# Logstash Pipeline Configuration for NIDS Multi-Zone Monitoring
# File: nids-pipeline.conf
# Updated for Ubuntu Router with 4 network zones
# Updated for Ubuntu Router with 4 network zones

input {
  # Monitor NIDS log files from Ubuntu Router
  # Monitor NIDS log files from Ubuntu Router
  file {
    path => "/home/duy/CodeBackup/Code/logs/*.log"
    start_position => "end"
    type => "nids-detection"
    codec => "json"
    tags => ["nids", "security", "network", "ubuntu-router"]
    tags => ["nids", "security", "network", "ubuntu-router"]
  }
  
  # Listen for direct syslog input from NIDS sensors
  udp {
  # Listen for direct syslog input from NIDS sensors
  udp {
    port => 5514
    type => "nids-syslog"
    tags => ["nids", "realtime", "syslog"]
  }
  
  # Optional: TCP input for reliable delivery
  tcp {
    port => 5515
    type => "nids-syslog"
    tags => ["nids", "realtime", "syslog"]
  }
  
  # Optional: TCP input for reliable delivery
  tcp {
    port => 5515
    type => "nids-tcp"
    codec => "json_lines"
    tags => ["nids", "realtime", "tcp"]
  }
  
  # Beats input for future Filebeat integration
  beats {
    port => 5516
    type => "nids-beats"
    tags => ["nids", "beats"]
    tags => ["nids", "realtime", "tcp"]
  }
  
  # Beats input for future Filebeat integration
  beats {
    port => 5516
    type => "nids-beats"
    tags => ["nids", "beats"]
  }
}

filter {
  # Parse syslog format if coming from UDP
  if [type] == "nids-syslog" {
    grok {
      match => { "message" => "<%{POSINT:priority}>%{GREEDYDATA:json_payload}" }
    }
    
    if [json_payload] {
      json {
        source => "json_payload"
        target => "nids"
      }
      
      # Move parsed fields to root level
      if [nids] {
        ruby {
          code => '
            nids_data = event.get("nids")
            nids_data.each { |key, value|
              event.set(key, value)
            }
            event.remove("nids")
          '
        }
      }
    }
  }
  
  # Parse syslog format if coming from UDP
  if [type] == "nids-syslog" {
    grok {
      match => { "message" => "<%{POSINT:priority}>%{GREEDYDATA:json_payload}" }
    }
    
    if [json_payload] {
      json {
        source => "json_payload"
        target => "nids"
      }
      
      # Move parsed fields to root level
      if [nids] {
        ruby {
          code => '
            nids_data = event.get("nids")
            nids_data.each { |key, value|
              event.set(key, value)
            }
            event.remove("nids")
          '
        }
      }
    }
  }
  
  # Parse timestamp
  if [timestamp] {
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSSSSS" ]
      target => "@timestamp"
    }
  }
  
  # Network zone enrichment
  if [network_zone] {
    mutate {
      add_field => { 
        "zone_description" => "%{network_zone}"
        "zone_criticality" => "medium"
      }
    }
    
    # Set zone criticality based on zone type
    if [network_zone] == "WAN" {
      mutate {
        update => { "zone_criticality" => "high" }
        add_field => { "zone_description" => "External Network - Internet Facing" }
      }
    } else if [network_zone] == "SERVER" {
      mutate {
        update => { "zone_criticality" => "critical" }
        add_field => { "zone_description" => "Server Network - Critical Systems" }
      }
    } else if [network_zone] == "DMZ" {
      mutate {
        update => { "zone_criticality" => "high" }
        add_field => { "zone_description" => "Demilitarized Zone - Public Services" }
      }
    } else if [network_zone] == "LAN" {
      mutate {
        update => { "zone_criticality" => "medium" }
        add_field => { "zone_description" => "Local Area Network - Internal Users" }
      }
    }
  }
  
  # Interface mapping
  if [interface] {
    mutate {
      add_field => { "interface_description" => "%{interface}" }
    }
    
    if [interface] == "ens33" {
      mutate {
        update => { "interface_description" => "WAN Interface - External Connection" }
      }
    } else if [interface] == "ens37" {
      mutate {
        update => { "interface_description" => "LAN Interface - Internal Network" }
      }
    } else if [interface] == "ens38" {
      mutate {
        update => { "interface_description" => "SERVER Interface - Server Network" }
      }
    } else if [interface] == "ens39" {
      mutate {
        update => { "interface_description" => "DMZ Interface - Public Services" }
      }
    }
  }
  
  # Network zone enrichment
  if [network_zone] {
    mutate {
      add_field => { 
        "zone_description" => "%{network_zone}"
        "zone_criticality" => "medium"
      }
    }
    
    # Set zone criticality based on zone type
    if [network_zone] == "WAN" {
      mutate {
        update => { "zone_criticality" => "high" }
        add_field => { "zone_description" => "External Network - Internet Facing" }
      }
    } else if [network_zone] == "SERVER" {
      mutate {
        update => { "zone_criticality" => "critical" }
        add_field => { "zone_description" => "Server Network - Critical Systems" }
      }
    } else if [network_zone] == "DMZ" {
      mutate {
        update => { "zone_criticality" => "high" }
        add_field => { "zone_description" => "Demilitarized Zone - Public Services" }
      }
    } else if [network_zone] == "LAN" {
      mutate {
        update => { "zone_criticality" => "medium" }
        add_field => { "zone_description" => "Local Area Network - Internal Users" }
      }
    }
  }
  
  # Interface mapping
  if [interface] {
    mutate {
      add_field => { "interface_description" => "%{interface}" }
    }
    
    if [interface] == "ens33" {
      mutate {
        update => { "interface_description" => "WAN Interface - External Connection" }
      }
    } else if [interface] == "ens37" {
      mutate {
        update => { "interface_description" => "LAN Interface - Internal Network" }
      }
    } else if [interface] == "ens38" {
      mutate {
        update => { "interface_description" => "SERVER Interface - Server Network" }
      }
    } else if [interface] == "ens39" {
      mutate {
        update => { "interface_description" => "DMZ Interface - Public Services" }
      }
    }
  }
  
  # Enrich with GeoIP if source_ip exists
  if [source_ip] and [source_ip] !~ /^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\.)/ {
  if [source_ip] and [source_ip] !~ /^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\.)/ {
    geoip {
      source => "source_ip"
      target => "src_geo"
    }
  }
  
  if [destination_ip] and [destination_ip] !~ /^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\.)/ {
  if [destination_ip] and [destination_ip] !~ /^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\.)/ {
    geoip {
      source => "destination_ip"
      target => "dst_geo"
    }
  }
  
  # Enhanced severity calculation based on prediction and zone
  # Enhanced severity calculation based on prediction and zone
  if [prediction] {
    if [prediction] == "0_normal" {
      mutate {
        add_field => { 
          "alert_severity" => "info"
          "alert_priority" => 1
          "risk_level" => 1
        }
        add_field => { 
          "alert_severity" => "info"
          "alert_priority" => 1
          "risk_level" => 1
        }
      }
    } else {
      # Base severity for attacks
      # Base severity for attacks
      if [prediction] == "TCP" {
        mutate {
          add_field => { 
            "alert_severity" => "high"
            "alert_priority" => 8
            "attack_description" => "TCP Port Scanning Detected"
            "attack_type" => "TCP Port Scan"
            "category" => "reconnaissance"
          }
          add_field => { 
            "alert_severity" => "high"
            "alert_priority" => 8
            "attack_description" => "TCP Port Scanning Detected"
            "attack_type" => "TCP Port Scan"
            "category" => "reconnaissance"
          }
        }
      } else if [prediction] == "UDP" {
        mutate {
          add_field => { 
            "alert_severity" => "medium"
            "alert_priority" => 6
            "attack_description" => "UDP Port Scanning Detected"
            "attack_type" => "UDP Port Scan"
            "category" => "reconnaissance"
          }
          add_field => { 
            "alert_severity" => "medium"
            "alert_priority" => 6
            "attack_description" => "UDP Port Scanning Detected"
            "attack_type" => "UDP Port Scan"
            "category" => "reconnaissance"
          }
        }
      } else if [prediction] == "ICMP" {
        mutate {
          add_field => { 
            "alert_severity" => "medium"
            "alert_priority" => 5
            "attack_description" => "ICMP Sweep/Ping Scanning Detected"
            "attack_type" => "ICMP Sweep"
            "category" => "reconnaissance"
          }
          add_field => { 
            "alert_severity" => "medium"
            "alert_priority" => 5
            "attack_description" => "ICMP Sweep/Ping Scanning Detected"
            "attack_type" => "ICMP Sweep"
            "category" => "reconnaissance"
          }
        }
      } else if [prediction] == "ARP" {
        mutate {
          add_field => { 
            "alert_severity" => "low"
            "alert_priority" => 4
            "attack_description" => "ARP Scanning Detected"
            "attack_type" => "ARP Scan"
            "category" => "reconnaissance"
          }
        }
      }
      
      # Default for other attack types
      if ![attack_type] {
        mutate {
          add_field => { 
            "alert_severity" => "high"
            "alert_priority" => 7
            "risk_level" => 8
            "attack_description" => "Unknown Attack Pattern"
            "attack_type" => "Unknown"
            "category" => "suspicious"
          }
        }
      }
      
      # Escalate severity based on network zone
      if [network_zone] == "SERVER" {
        if [alert_priority] {
          ruby {
            code => '
              priority = event.get("alert_priority").to_i
              event.set("alert_priority", [priority + 2, 10].min)
              if priority >= 8
                event.set("alert_severity", "critical")
              end
            '
          }
        }
      } else if [network_zone] == "WAN" {
        if [alert_priority] {
          ruby {
            code => '
              priority = event.get("alert_priority").to_i
              event.set("alert_priority", [priority + 1, 10].min)
            '
          }
          add_field => { 
            "alert_severity" => "low"
            "alert_priority" => 4
            "attack_description" => "ARP Scanning Detected"
            "attack_type" => "ARP Scan"
            "category" => "reconnaissance"
          }
        }
      }
      
      # Default for other attack types
      if ![attack_type] {
        mutate {
          add_field => { 
            "alert_severity" => "high"
            "alert_priority" => 7
            "risk_level" => 8
            "attack_description" => "Unknown Attack Pattern"
            "attack_type" => "Unknown"
            "category" => "suspicious"
          }
        }
      }
      
      # Escalate severity based on network zone
      if [network_zone] == "SERVER" {
        if [alert_priority] {
          ruby {
            code => '
              priority = event.get("alert_priority").to_i
              event.set("alert_priority", [priority + 2, 10].min)
              if priority >= 8
                event.set("alert_severity", "critical")
              end
            '
          }
        }
      } else if [network_zone] == "WAN" {
        if [alert_priority] {
          ruby {
            code => '
              priority = event.get("alert_priority").to_i
              event.set("alert_priority", [priority + 1, 10].min)
            '
          }
        }
      }
    }
  }
  
  # Add network zone classification
  if [source_ip] {
    cidr {
      address => [ "%{source_ip}" ]
      network => [ "192.168.20.0/24" ]
      network => [ "192.168.20.0/24" ]
      add_tag => [ "lan_source" ]
    }
    cidr {
      address => [ "%{source_ip}" ]
      network => [ "10.0.0.0/24" ]
      add_tag => [ "wan_source" ]
    }
    cidr {
      address => [ "%{source_ip}" ]
      network => [ "192.168.40.0/24" ]
      network => [ "192.168.40.0/24" ]
      add_tag => [ "dmz_source" ]
    }
    cidr {
      address => [ "%{source_ip}" ]
      network => [ "192.168.30.0/24" ]
      network => [ "192.168.30.0/24" ]
      add_tag => [ "server_source" ]
    }
  }
  
  # Calculate session duration if available
  if [flow_duration] {
    ruby {
      code => "
        duration = event.get('flow_duration')
        if duration
          if duration > 300
            event.set('session_type', 'long')
          elsif duration > 60
            event.set('session_type', 'medium')
          else
            event.set('session_type', 'short')
          end
        end
      "
    }
  }
  
  # Remove unnecessary fields to reduce storage
  mutate {
    remove_field => [ "host", "path", "@version" ]
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "nids-logs-%{+YYYY.MM.dd}"
    
    # Modern template configuration for Logstash 8.x
    manage_template => true
    
    # Modern template configuration for Logstash 8.x
    manage_template => true
    template_name => "nids-template"
    template => "C:/ELK/logstash/logstash-8.11.0/config/nids-template.json"
    template => "C:/ELK/logstash/logstash-8.11.0/config/nids-template.json"
  }
  
  # Debug output (comment out in production)
  stdout {
    codec => rubydebug
  }
}
